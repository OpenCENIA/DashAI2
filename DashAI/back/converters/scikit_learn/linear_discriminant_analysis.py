from sklearn.discriminant_analysis import (
    LinearDiscriminantAnalysis as LinearDiscriminantAnalysisOperation,
)

from DashAI.back.core.schema_fields import (
    schema_field,
    int_field,
    float_field,
    bool_field,
    enum_field,
    union_type,
    none_type,
)

from DashAI.back.core.schema_fields.base_schema import BaseSchema
from DashAI.back.converters.scikit_learn.sklearn_like_converter import (
    SklearnLikeConverter,
)


class LinearDiscriminantAnalysisSchema(BaseSchema):
    solver: schema_field(
        enum_field(["svd", "lsqr", "eigen"]),
        "svd",
        "Solver to use. One of 'svd', 'lsqr', 'eigen'.",
    )  # type: ignore
    shrinkage: schema_field(
        none_type(
            union_type(
                enum_field(["auto"]),
                float_field(),
            )
        ),
        None,
        "Shrinkage parameter.",
    )  # type: ignore
    # priors: schema_field(
    #     none_type(float_field()), # array-like of shape (n_classes,)
    #     None,
    #     "Class priors.",
    # )  # type: ignore
    n_components: schema_field(
        none_type(int_field(ge=1)),
        None,
        "Number of components to keep.",
    )  # type: ignore
    store_covariance: schema_field(
        bool_field(),
        False,
        "If True, the covariance matrices are computed and stored in the `covariance_` attribute.",
    )  # type: ignore
    tol: schema_field(
        float_field(ge=0.0),
        1e-4,
        "Tolerance for the stopping condition.",
    )  # type: ignore
    # covariance_estimator: schema_field(
    #     none_type(), # covariance estimator
    #     None,
    #     "Estimator used to compute the covariance matrix.",
    # )  # type: ignore


class LinearDiscriminantAnalysis(
    SklearnLikeConverter, LinearDiscriminantAnalysisOperation
):
    """Scikit-learn's LinearDiscriminantAnalysis wrapper for DashAI."""

    SCHEMA = LinearDiscriminantAnalysisSchema
    DESCRIPTION = "A classifier with a linear decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule."
