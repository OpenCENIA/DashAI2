from sklearn.discriminant_analysis import (
    QuadraticDiscriminantAnalysis as QuadraticDiscriminantAnalysisOperation,
)

from DashAI.back.converters.sklearn_wrapper import SklearnWrapper
from DashAI.back.core.schema_fields import (
    bool_field,
    float_field,
    schema_field,
)
from DashAI.back.core.schema_fields.base_schema import BaseSchema


class QuadraticDiscriminantAnalysisSchema(BaseSchema):
    # priors: schema_field(
    #     none_type(float_field()), # array-like of shape (n_classes,)
    #     None,
    #     "Class priors.",
    # )  # type: ignore
    reg_param: schema_field(
        float_field(ge=0.0),
        0.0,
        "Regularization parameter.",
    )  # type: ignore
    store_covariance: schema_field(
        bool_field(),
        False,
        "If True, the covariance matrices are computed and stored in the `covariance_` attribute.",
    )  # type: ignore
    tol: schema_field(
        float_field(ge=0.0),
        1e-4,
        "Tolerance for the stopping condition.",
    )  # type: ignore


class QuadraticDiscriminantAnalysis(
    SklearnWrapper, QuadraticDiscriminantAnalysisOperation
):
    """Scikit-learn's QuadraticDiscriminantAnalysis wrapper for DashAI."""

    SCHEMA = QuadraticDiscriminantAnalysisSchema
    DESCRIPTION = "A classifier with a quadratic decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule."
